name: Configure config.json from Issue
on:
  issues:
    types: [opened, edited]
permissions:
  contents: write
  issues: write
  pull-requests: write # Required permission to create a Pull Request
jobs:
  update-config:
    if: github.event.issue.title == 'Configure config.json'
    runs-on: windows-latest 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for proper branch/commit operations
          fetch-depth: 0

      - name: Extract values and define branch name from issue body
        id: extract
        shell: pwsh
        run: |
          $body = "${{ github.event.issue.body }}"
          
          # Define a script block for extraction using PowerShell string manipulation
          $extract_value = {
              param([string]$Header)
              # Use -split for extraction between two headers
              $value = ($body -split "### $Header")[1] -split "###" | Select-Object -First 1
              return $value.Trim()
          }
          
          $DRIVER_NAME = $extract_value.Invoke("Driver Name")
          $VERSION = $extract_value.Invoke("Version")
          $INSTRUMENT_MODEL = $extract_value.Invoke("Instrument Model")
          $MANUFACTURER = $extract_value.Invoke("Manufacturer")
          
          # Clean driver name for folder usage (remove invalid characters)
          $CLEAN_DRIVER_NAME = $DRIVER_NAME -replace '[<>:"/\\|?*\s]', '_'
          
          # Define the new branch name
          $ISSUE_NUMBER = "${{ github.event.issue.number }}"
          $BRANCH_NAME = "feat/$CLEAN_DRIVER_NAME-$ISSUE_NUMBER"
          
          "driver_name=$DRIVER_NAME" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "clean_driver_name=$CLEAN_DRIVER_NAME" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "instrument_model=$INSTRUMENT_MODEL" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "manufacturer=$MANUFACTURER" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "branch_name=$BRANCH_NAME" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create and switch to new branch
        shell: pwsh
        run: |
          git checkout -b ${{ steps.extract.outputs.branch_name }}
          Write-Host "Successfully created and switched to branch: ${{ steps.extract.outputs.branch_name }}"
          
      - name: Debug extracted values
        shell: pwsh
        run: |
          Write-Host "Driver Name: ${{ steps.extract.outputs.driver_name }}"
          Write-Host "Clean Driver Name: ${{ steps.extract.outputs.clean_driver_name }}"
          Write-Host "Version: ${{ steps.extract.outputs.version }}"
          Write-Host "Instrument Model: ${{ steps.extract.outputs.instrument_model }}"
          Write-Host "Manufacturer: ${{ steps.extract.outputs.manufacturer }}"
          Write-Host "Branch Name: ${{ steps.extract.outputs.branch_name }}"
          
      - name: List current directory structure
        shell: pwsh
        run: |
          Write-Host "Current directory contents:"
          Get-ChildItem -Path . -Recurse -Depth 2
          
      - name: Rename ConsoleApp1 folder
        shell: pwsh
        run: |
          $OLD_FOLDER="ConsoleApp1"
          $NEW_FOLDER="${{ steps.extract.outputs.clean_driver_name }}"
          
          Write-Host "Attempting to rename folder '$OLD_FOLDER' to '$NEW_FOLDER'"
          
          if (Test-Path -Path $OLD_FOLDER -PathType Container) {
            # Use git mv for proper tracking of the rename on Windows runner
            git mv "$OLD_FOLDER" "$NEW_FOLDER"
            Write-Host "Successfully renamed $OLD_FOLDER to $NEW_FOLDER using git mv"
          } else {
            Write-Warning "::warning title=Folder Not Found::$OLD_FOLDER does not exist."
          }

      - name: Rename solution and project files
        shell: pwsh
        run: |
          $OLD_NAME="ConsoleApp1"
          $NEW_NAME="${{ steps.extract.outputs.clean_driver_name }}"
          
          Write-Host "Renaming .sln and .csproj files..."
          
          # Rename the solution file (e.g., ConsoleApp1.sln -> NewDriverName.sln)
          Get-ChildItem -Path . -Filter "$OLD_NAME.sln" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Renaming solution file: $($_.Name)"
            # Use git mv to rename the file and stage the change
            git mv -f "$($_.FullName)" "$($_.DirectoryName)/$NEW_NAME.sln"
          }
          
          # Rename the project file (e.g., NewDriverName/ConsoleApp1.csproj -> NewDriverName/NewDriverName.csproj)
          Get-ChildItem -Path . -Filter "$OLD_NAME.csproj" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Renaming project file: $($_.Name)"
            # Use git mv to rename the file and stage the change
            git mv -f "$($_.FullName)" "$($_.DirectoryName)/$NEW_NAME.csproj"
          }

      - name: Update solution and project content
        shell: pwsh
        run: |
          $OLD_REF="ConsoleApp1"
          $NEW_REF="${{ steps.extract.outputs.clean_driver_name }}"
          
          Write-Host "Updating references in .sln and .csproj files..."
          
          # Find all .sln and .csproj files recursively
          Get-ChildItem -Path . -Recurse -Include *.sln, *.csproj -ErrorAction SilentlyContinue | ForEach-Object {
            $file = $_.FullName
            Write-Host "Processing file: $($_.Name)"
            
            # Read content, replace using PowerShell's -replace operator, and write back
            # -NoNewline is important for maintaining file integrity
            (Get-Content -Path $file -Raw) -replace [regex]::Escape($OLD_REF), $NEW_REF | Set-Content -Path $file -NoNewline
          }

      - name: Update config.json
        shell: pwsh
        run: |
          $CONFIG_PATH="config.json"
          if (Test-Path $CONFIG_PATH) {
            # Read, convert, update properties, convert back, and write
            $config = Get-Content $CONFIG_PATH | ConvertFrom-Json
            
            $config.driver_name = "${{ steps.extract.outputs.driver_name }}"
            $config.version = "${{ steps.extract.outputs.version }}"
            $config.instrument_model = "${{ steps.extract.outputs.instrument_model }}"
            $config.manufacturer = "${{ steps.extract.outputs.manufacturer }}"
            
            $config | ConvertTo-Json -Depth 10 | Set-Content $CONFIG_PATH -NoNewline
            Write-Host "Updated config.json"
          } else {
            Write-Warning "::warning title=File Not Found::config.json not found"
          }
          
      - name: Commit changes
        shell: pwsh
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all modified, renamed, and new files
          git add .
          
          # Check if there are changes to commit
          # git diff --cached --quiet exits with 0 if no changes, 1 if there are changes
          $changes = git diff --cached --quiet
          if (-not $changes) {
            $COMMIT_MESSAGE = "feat(${{ steps.extract.outputs.clean_driver_name }}): Configure driver files from Issue #${{ github.event.issue.number }}"
            git commit -m "$COMMIT_MESSAGE"
            Write-Host "Changes committed to branch ${{ steps.extract.outputs.branch_name }}"
          } else {
            Write-Host "No changes to commit."
          }

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # The commit is already made in the previous step, so we ensure the action
          # pushes the existing commit and creates the PR.
          commit-message: no-commit
          branch: ${{ steps.extract.outputs.branch_name }}
          base: main # IMPORTANT: Set your target branch (e.g., 'main' or 'master')
          title: 'feat: Configure ${{ steps.extract.outputs.driver_name }} driver from Issue #${{ github.event.issue.number }}'
          body: |
            ü§ñ This PR was automatically generated from issue #${{ github.event.issue.number }} (Configure config.json).
            
            The following updates were applied:
            
            - **Driver Name:** `${{ steps.extract.outputs.driver_name }}`
            - **Version:** `${{ steps.extract.outputs.version }}`
            - **Instrument Model:** `${{ steps.extract.outputs.instrument_model }}`
            - **Manufacturer:** `${{ steps.extract.outputs.manufacturer }}`
            
            This PR renames the project folder, solution, and project files from `ConsoleApp1` and updates the `config.json`.
            
            Closes #${{ github.event.issue.number }}
            
            ---
            *If you wish to make changes, please push to the branch `${{ steps.extract.outputs.branch_name }}`.*

      - name: Add comment to issue
        uses: actions/github-script@v7
        with:
          script: |
            const prUrl = steps.create_pr.outputs.pull-request-url;
            const issue_number = context.payload.issue.number;
            
            if (prUrl) {
                await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: `‚úÖ Configuration complete. I have created a Pull Request for your review: ${prUrl}.`
                });
            } else {
                await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: `‚ö†Ô∏è Configuration completed, but I was unable to create a Pull Request (likely because no files were modified). Please review the commit on branch ${{ steps.extract.outputs.branch_name }}.`
                });
            }
